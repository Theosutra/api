import logging
import uvicorn
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import time
import os
import asyncio

from app.config import get_settings
from app.api.routes import router
from app.security import configure_security

# Import des services (Service Layer)
from app.core.llm_service import initialize_llm_service, cleanup_llm_service
from app.services.translation_service import TranslationService
from app.services.validation_service import ValidationService

# Configuration du logger
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

logger = logging.getLogger(__name__)
settings = get_settings()

# Services globaux (initialis√©s au d√©marrage)
translation_service: TranslationService = None
validation_service: ValidationService = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire de cycle de vie de l'application avec Service Layer.
    Remplace les anciens on_event("startup") et on_event("shutdown").
    """
    global translation_service, validation_service
    
    # === STARTUP ===
    logger.info("üöÄ D√©marrage de NL2SQL API v2.0.0 - Service Layer Architecture")
    
    try:
        # 1. Initialiser le service LLM
        logger.info("üì° Initialisation du service LLM...")
        await initialize_llm_service()
        logger.info("‚úÖ Service LLM initialis√© avec succ√®s")
        
        # 2. Initialiser les services m√©tier
        logger.info("‚öôÔ∏è Initialisation des services m√©tier...")
        
        # Service de validation unifi√©
        validation_service = ValidationService(settings)
        logger.info("‚úÖ Service de validation initialis√©")
        
        # Service de traduction principal
        translation_service = TranslationService(settings)
        logger.info("‚úÖ Service de traduction initialis√©")
        
        # 3. V√©rifier la sant√© des services
        logger.info("üîç V√©rification de la sant√© des services...")
        health_status = await translation_service.get_health_status()
        
        if health_status["status"] == "ok":
            logger.info("‚úÖ Tous les services sont op√©rationnels")
        else:
            logger.warning(f"‚ö†Ô∏è Certains services pr√©sentent des probl√®mes:")
            for service_name, service_info in health_status["services"].items():
                if service_info.get("status") != "ok":
                    logger.warning(f"  - {service_name}: {service_info.get('status', 'unknown')}")
        
        # 4. Afficher les informations de configuration
        logger.info("üìã Configuration des services:")
        logger.info(f"  - Provider LLM par d√©faut: {settings.DEFAULT_PROVIDER}")
        logger.info(f"  - Cache activ√©: {settings.CACHE_ENABLED}")
        logger.info(f"  - Mode debug: {settings.DEBUG}")
        logger.info(f"  - Sch√©ma: {settings.SCHEMA_PATH}")
        
        # 5. Afficher les providers LLM configur√©s
        try:
            from app.core.llm_service import LLMService
            configured_providers = LLMService.get_configured_providers()
            logger.info(f"  - Providers LLM configur√©s: {configured_providers}")
        except Exception as e:
            logger.warning(f"  - Impossible de r√©cup√©rer les providers LLM: {e}")
        
        # 6. Test rapide des services critiques
        logger.info("üß™ Test rapide des services critiques...")
        try:
            # Test du service de validation
            test_sql = "SELECT * FROM test"
            is_valid, _ = validation_service.validate_sql_syntax(test_sql)
            if is_valid:
                logger.info("‚úÖ Service de validation fonctionnel")
            else:
                logger.warning("‚ö†Ô∏è Service de validation: test de syntaxe √©chou√©")
            
            # Test du service de traduction (basique)
            test_request = {"query": "test query"}
            is_valid_request, _ = translation_service.validate_translation_request(test_request)
            if is_valid_request:
                logger.info("‚úÖ Service de traduction fonctionnel")
            else:
                logger.warning("‚ö†Ô∏è Service de traduction: validation de requ√™te √©chou√©e")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors des tests de services: {e}")
        
        logger.info("üéØ API pr√™te √† recevoir des requ√™tes - Service Layer activ√©")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©marrage: {e}")
        logger.warning("L'application d√©marre malgr√© les erreurs d'initialisation")
    
    # Application pr√™te - yield permet √† FastAPI de continuer
    yield
    
    # === SHUTDOWN ===
    logger.info("üõë Arr√™t de NL2SQL API - Service Layer")
    
    try:
        # 1. Nettoyer les services m√©tier
        logger.info("üßπ Nettoyage des services m√©tier...")
        
        if translation_service:
            translation_service = None
            logger.info("‚úÖ Service de traduction nettoy√©")
        
        if validation_service:
            validation_service = None
            logger.info("‚úÖ Service de validation nettoy√©")
        
        # 2. Nettoyer le service LLM
        logger.info("üßπ Nettoyage du service LLM...")
        await cleanup_llm_service()
        logger.info("‚úÖ Service LLM nettoy√©")
        
        # 3. Nettoyer les autres services si n√©cessaire
        try:
            from app.core.embedding import cleanup_embedding_service
            await cleanup_embedding_service()
            logger.info("‚úÖ Service d'embedding nettoy√©")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors du nettoyage d'embedding: {e}")
        
        try:
            from app.core.vector_search import cleanup_vector_service
            await cleanup_vector_service()
            logger.info("‚úÖ Service de recherche vectorielle nettoy√©")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors du nettoyage vectoriel: {e}")
        
        try:
            from app.utils.cache import cleanup_cache_service
            await cleanup_cache_service()
            logger.info("‚úÖ Service de cache nettoy√©")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors du nettoyage cache: {e}")
        
        logger.info("‚úÖ Arr√™t propre de l'application - Service Layer")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'arr√™t: {e}")


# Cr√©er l'application FastAPI avec le nouveau gestionnaire de cycle de vie
app = FastAPI(
    title="NL2SQL API",
    description="""
    API pour traduire des requ√™tes en langage naturel en SQL.
    Utilise une combinaison de recherche vectorielle et de g√©n√©ration via LLM pour produire des requ√™tes SQL optimis√©es.
    
    Version 2.0.0 - Architecture Service Layer avec validation unifi√©e.
    """,
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan  # Nouveau gestionnaire de cycle de vie
)

# Configurer la s√©curit√© de l'application
configure_security(app)

# Inclure les routes
app.include_router(router, prefix=settings.API_PREFIX)


@app.middleware("http")
async def log_requests(request: Request, call_next):
    """
    Middleware pour journaliser les requ√™tes et mesurer leur temps d'ex√©cution.
    Version am√©lior√©e avec informations Service Layer.
    
    Args:
        request: L'objet Request de FastAPI
        call_next: La fonction √† appeler pour traiter la requ√™te
        
    Returns:
        La r√©ponse HTTP
    """
    start_time = time.time()
    
    # Extraire les informations de la requ√™te
    method = request.method
    url = str(request.url)
    client_host = request.client.host if request.client else "unknown"
    
    # Journaliser la requ√™te entrante (niveau DEBUG pour √©viter le spam)
    logger.debug(f"üì® {method} {url} <- {client_host}")
    
    try:
        # Traiter la requ√™te
        response = await call_next(request)
        
        # Calculer la dur√©e de traitement
        process_time = time.time() - start_time
        
        # Journaliser la r√©ponse avec niveau appropri√©
        log_level = logging.INFO if response.status_code < 400 else logging.WARNING
        status_emoji = "‚úÖ" if response.status_code < 400 else "‚ö†Ô∏è" if response.status_code < 500 else "‚ùå"
        
        # Informations Service Layer dans les logs
        service_info = ""
        if "/translate" in url:
            service_info = " [TranslationService]"
        elif "/validate-framework" in url:
            service_info = " [ValidationService]"
        elif "/health" in url:
            service_info = " [HealthService]"
        
        logger.log(
            log_level,
            f"{status_emoji} {method} {url}{service_info} -> {response.status_code} ({process_time:.3f}s)"
        )
        
        # Ajouter les en-t√™tes de r√©ponse
        response.headers["X-Process-Time"] = f"{process_time:.3f}"
        response.headers["X-API-Version"] = "2.0.0"
        response.headers["X-Architecture"] = "Service-Layer"
        
        return response
    
    except Exception as e:
        # Journaliser l'erreur
        process_time = time.time() - start_time
        logger.error(f"üí• {method} {url} -> ERROR ({process_time:.3f}s): {str(e)}", exc_info=True)
        
        # Renvoyer une r√©ponse d'erreur enrichie
        return JSONResponse(
            status_code=500,
            content={
                "detail": f"Erreur interne du serveur: {str(e)}",
                "error_type": "internal_server_error",
                "request_id": id(request),  # Simple request ID pour le debugging
                "architecture": "service_layer"
            },
            headers={
                "X-Process-Time": f"{process_time:.3f}",
                "X-API-Version": "2.0.0",
                "X-Architecture": "Service-Layer"
            }
        )


@app.get("/", tags=["info"])
async def root():
    """
    Endpoint racine qui renvoie des informations de base sur l'API.
    Version Service Layer avec statistiques enrichies.
    
    Returns:
        Informations de base sur l'API avec statistiques des services
    """
    try:
        # R√©cup√©rer les informations via les services
        from app.core.llm_service import LLMService
        
        configured_providers = LLMService.get_configured_providers()
        available_models = await LLMService.get_available_models()
        
        # Statistiques des services
        service_stats = {
            "configured_providers": configured_providers,
            "total_models": len(available_models),
            "default_provider": settings.DEFAULT_PROVIDER,
            "services_initialized": {
                "translation_service": translation_service is not None,
                "validation_service": validation_service is not None,
                "llm_service": True,
                "cache_enabled": settings.CACHE_ENABLED
            }
        }
        
        return {
            "message": "üöÄ Bienvenue sur l'API NL2SQL v2.0.0 - Service Layer!",
            "description": "API intelligente de traduction langage naturel vers SQL",
            "version": "2.0.0",
            "architecture": "Service Layer Pattern",
            "documentation": f"{settings.API_PREFIX}/docs",
            "redoc": f"{settings.API_PREFIX}/../redoc",
            "health_check": f"{settings.API_PREFIX}/health",
            "services": service_stats,
            "features": [
                "üß† Multi-LLM (OpenAI, Anthropic, Google)",
                "üîç Recherche vectorielle s√©mantique", 
                "üõ°Ô∏è Framework de s√©curit√© obligatoire",
                "üíæ Cache Redis intelligent",
                "‚úÖ Validation unifi√©e centralis√©e",
                "üîÑ Retry automatique avec backoff",
                "üèóÔ∏è Architecture Service Layer",
                "üìä Health checks avanc√©s"
            ],
            "endpoints": {
                "translate": f"{settings.API_PREFIX}/translate",
                "validate": f"{settings.API_PREFIX}/validate-framework",
                "models": f"{settings.API_PREFIX}/models",
                "schemas": f"{settings.API_PREFIX}/schemas",
                "cache_stats": f"{settings.API_PREFIX}/cache/stats"
            }
        }
    
    except Exception as e:
        logger.error(f"Erreur dans endpoint racine: {e}")
        return {
            "message": "üöÄ Bienvenue sur l'API NL2SQL v2.0.0 - Service Layer!",
            "version": "2.0.0",
            "architecture": "Service Layer Pattern",
            "documentation": f"{settings.API_PREFIX}/docs",
            "status": "Service partiellement disponible",
            "error": "Impossible de r√©cup√©rer les informations compl√®tes des services"
        }


@app.get("/metrics", tags=["monitoring"])
async def get_metrics():
    """
    Endpoint pour r√©cup√©rer les m√©triques de performance avec Service Layer.
    
    Returns:
        M√©triques de performance de l'API et des services
    """
    try:
        from app.core.llm_service import LLMService
        
        # M√©triques des services LLM
        llm_health = await LLMService.check_services_health()
        
        # M√©triques de l'API
        metrics = {
            "api": {
                "version": "2.0.0",
                "architecture": "service_layer",
                "uptime": time.time(),  # Approximatif depuis le d√©marrage
                "timestamp": time.time()
            },
            "services": {
                "llm": llm_health,
                "translation": {
                    "status": "ok" if translation_service else "not_initialized",
                    "class": translation_service.__class__.__name__ if translation_service else None
                },
                "validation": {
                    "status": "ok" if validation_service else "not_initialized", 
                    "class": validation_service.__class__.__name__ if validation_service else None
                }
            }
        }
        
        # Ajouter les m√©triques de cache si disponibles
        try:
            from app.utils.cache import get_cache_stats
            cache_stats = await get_cache_stats()
            metrics["services"]["cache"] = cache_stats
        except Exception as e:
            metrics["services"]["cache"] = {"status": "error", "message": str(e)}
        
        # Ajouter les m√©triques du service de traduction si disponible
        if translation_service:
            try:
                translation_health = await translation_service.get_health_status()
                metrics["services"]["translation"]["health"] = translation_health
            except Exception as e:
                metrics["services"]["translation"]["health_error"] = str(e)
        
        return metrics
    
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des m√©triques: {e}")
        return {
            "error": "Impossible de r√©cup√©rer les m√©triques",
            "timestamp": time.time(),
            "architecture": "service_layer"
        }


@app.get("/service-info", tags=["monitoring"])
async def get_service_info():
    """
    Endpoint pour r√©cup√©rer les informations d√©taill√©es des services.
    
    Returns:
        Informations d√©taill√©es sur l'architecture Service Layer
    """
    try:
        service_info = {
            "architecture": "Service Layer Pattern",
            "version": "2.0.0",
            "services": {
                "translation_service": {
                    "initialized": translation_service is not None,
                    "class": translation_service.__class__.__name__ if translation_service else None,
                    "description": "Service principal de traduction NL2SQL",
                    "responsibilities": [
                        "Orchestration du processus de traduction",
                        "Gestion des correspondances exactes",
                        "Coordination des validations",
                        "Formatage des r√©ponses"
                    ]
                },
                "validation_service": {
                    "initialized": validation_service is not None,
                    "class": validation_service.__class__.__name__ if validation_service else None,
                    "description": "Service unifi√© de validation",
                    "responsibilities": [
                        "Validation syntaxique SQL",
                        "Validation de s√©curit√©",
                        "Validation du framework obligatoire",
                        "Correction automatique",
                        "Validation s√©mantique"
                    ]
                },
                "llm_service": {
                    "description": "Service LLM avec Factory Pattern",
                    "responsibilities": [
                        "Gestion multi-provider LLM",
                        "G√©n√©ration SQL",
                        "Validation s√©mantique",
                        "Explication des requ√™tes"
                    ]
                }
            },
            "benefits": [
                "S√©paration claire des responsabilit√©s",
                "Code plus maintenable et testable",
                "R√©utilisabilit√© des services",
                "Gestion centralis√©e des erreurs",
                "√âvolutivit√© simplifi√©e"
            ],
            "config": {
                "default_provider": settings.DEFAULT_PROVIDER,
                "cache_enabled": settings.CACHE_ENABLED,
                "debug_mode": settings.DEBUG
            }
        }
        
        return service_info
    
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des infos services: {e}")
        return {
            "error": "Impossible de r√©cup√©rer les informations des services",
            "architecture": "service_layer"
        }


if __name__ == "__main__":
    # R√©cup√©rer le port √† partir des variables d'environnement ou utiliser 8000 par d√©faut
    port = int(os.environ.get("PORT", 8000))
    host = os.environ.get("HOST", "0.0.0.0")
    
    # Configuration des logs pour le d√©veloppement
    log_level = "debug" if settings.DEBUG else "info"
    
    # D√©marrer le serveur
    logger.info(f"üöÄ D√©marrage du serveur NL2SQL API v2.0.0 - Service Layer")
    logger.info(f"üì° Host: {host}:{port}")
    logger.info(f"üîß Debug: {settings.DEBUG}")
    logger.info(f"üìù Log level: {log_level}")
    logger.info(f"üèóÔ∏è Architecture: Service Layer Pattern")
    
    try:
        uvicorn.run(
            "app.main:app",
            host=host,
            port=port,
            reload=settings.DEBUG,
            log_level=log_level,
            access_log=settings.DEBUG,  # Logs d'acc√®s uniquement en debug
            server_header=False,  # Cacher la version uvicorn
            date_header=False     # Pas besoin du header date
        )
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"üí• Erreur fatale lors du d√©marrage: {e}")
        exit(1)